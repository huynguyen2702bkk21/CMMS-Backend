// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPICHATest.Infrastructure;

#nullable disable

namespace WebAPICHATest.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230520171700_RemoveNullForUsedTimeEquipment")]
    partial class RemoveNullForUsedTimeEquipment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("causeseq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("correctioneq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("equipmenteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("equipmentmaterialeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("imageeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("kittesteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("maintenancerequesteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("maintenanceresponseeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("materialeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("materialinforeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("materialrequesteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("moldeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("moldinforeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("performanceindexeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("personeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("producteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("soundeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("timeseriesobjecteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("workingtimeeq", "application")
                .IncrementsBy(10);

            modelBuilder.Entity("CauseMaintenanceResponse", b =>
                {
                    b.Property<int>("CauseId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceResponsesId")
                        .HasColumnType("int");

                    b.HasKey("CauseId", "MaintenanceResponsesId");

                    b.HasIndex("MaintenanceResponsesId");

                    b.ToTable("CauseMaintenanceResponse");
                });

            modelBuilder.Entity("CorrectionMaintenanceResponse", b =>
                {
                    b.Property<int>("CorrectionId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceResponsesId")
                        .HasColumnType("int");

                    b.HasKey("CorrectionId", "MaintenanceResponsesId");

                    b.HasIndex("MaintenanceResponsesId");

                    b.ToTable("CorrectionMaintenanceResponse");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.CauseAggregate.Cause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "causeseq", "application");

                    b.Property<string>("CauseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CauseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaintenanceObject")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CauseId")
                        .IsUnique();

                    b.ToTable("Causes");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.CorrectionAggregate.Correction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "correctioneq", "application");

                    b.Property<string>("CorrectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CorrectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrectionType")
                        .HasColumnType("int");

                    b.Property<int?>("EstProcessTime")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CorrectionId")
                        .IsUnique();

                    b.ToTable("Corrections");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "equipmenteq", "application");

                    b.Property<string>("Code")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MTBFId")
                        .HasColumnType("int");

                    b.Property<int?>("MTTFId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("OEEId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleWorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UsedTime")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<int?>("WorkingTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId")
                        .IsUnique();

                    b.HasIndex("MTBFId");

                    b.HasIndex("MTTFId");

                    b.HasIndex("OEEId");

                    b.HasIndex("WorkingTimeId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.EquipmentMaterialAggregate.EquipmentMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "equipmentmaterialeq", "application");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentMaterialId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("FullTime")
                        .IsRequired()
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<DateTime>("InstalledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialInforId")
                        .HasColumnType("int");

                    b.Property<int?>("MoldId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UsedTime")
                        .IsRequired()
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("EquipmentMaterialId")
                        .IsUnique();

                    b.HasIndex("MaterialInforId");

                    b.HasIndex("MoldId");

                    b.ToTable("EquipmentMaterials");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.ImageAggregate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "imageeq", "application");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MaintenanceRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("MoldId")
                        .HasColumnType("int");

                    b.Property<int?>("MoldInforId")
                        .HasColumnType("int");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("MaintenanceRequestId");

                    b.HasIndex("MaintenanceResponseId");

                    b.HasIndex("MoldId");

                    b.HasIndex("MoldInforId");

                    b.HasIndex("StandardId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.KitTestAggregate.KitTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "kittesteq", "application");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KitTestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KitTestId")
                        .IsUnique();

                    b.ToTable("KitTests");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaintenanceRequestAggregate.MaintenanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "maintenancerequesteq", "application");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EstProcessingTime")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceObject")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceRequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MoldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RequestedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequestedPriority")
                        .HasColumnType("int");

                    b.Property<int?>("RequesterId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MaintenanceRequestId")
                        .IsUnique();

                    b.HasIndex("MoldId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("ResponsiblePersonId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("MaintenanceRequests");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "maintenanceresponseeq", "application");

                    b.Property<DateTime?>("ActualFinishTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EstProcessTime")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceObject")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceResponseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MoldId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlannedFinish")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MaintenanceResponseId")
                        .IsUnique();

                    b.HasIndex("MoldId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("MaintenanceResponses");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaterialAggregate.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "materialeq", "application");

                    b.Property<int?>("MaintenanceResponseId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaterialInforId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceResponseId");

                    b.HasIndex("MaterialId")
                        .IsUnique();

                    b.HasIndex("MaterialInforId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaterialInforAggregate.MaterialInfor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "materialinforeq", "application");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialInforId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MinimumQuantity")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialInforId")
                        .IsUnique();

                    b.ToTable("MaterialInfors");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaterialRequestAggregate.MaterialRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "materialrequesteq", "application");

                    b.Property<decimal?>("AdditionalNumber")
                        .IsRequired()
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CurrentNumber")
                        .IsRequired()
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExpectedNumber")
                        .IsRequired()
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<int?>("MaterialInforId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialRequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialInforId");

                    b.HasIndex("MaterialRequestId")
                        .IsUnique();

                    b.ToTable("MaterialRequests");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "moldeq", "application");

                    b.Property<int?>("Cavity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MTBFId")
                        .HasColumnType("int");

                    b.Property<int?>("MTTFId")
                        .HasColumnType("int");

                    b.Property<string>("MoldId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OEEId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleWorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTBFId");

                    b.HasIndex("MTTFId");

                    b.HasIndex("MoldId")
                        .IsUnique();

                    b.HasIndex("OEEId");

                    b.ToTable("Molds");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MoldInforAggregate.MoldInfor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "moldinforeq", "application");

                    b.Property<int>("Cavity")
                        .HasColumnType("int");

                    b.Property<string>("DocumentLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoldInforId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoldInforId")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("MoldInfors");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "performanceindexeq", "application");

                    b.Property<bool>("IsTracking")
                        .HasColumnType("bit");

                    b.Property<int>("MaxLength")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceIndexId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RecentValue")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceIndexId")
                        .IsUnique();

                    b.ToTable("PerformanceIndexs");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "personeq", "application");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleWorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkingTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("WorkingTimeId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.ProductAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "producteq", "application");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoldId1")
                        .HasColumnType("int");

                    b.Property<int>("MoldInforId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.HasKey("Id");

                    b.HasIndex("MoldId1");

                    b.HasIndex("MoldInforId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.SoundAggregate.Sound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "soundeq", "application");

                    b.Property<int?>("MaintenanceRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceResponseId")
                        .HasColumnType("int");

                    b.Property<string>("SoundId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceRequestId");

                    b.HasIndex("MaintenanceResponseId");

                    b.HasIndex("SoundId")
                        .IsUnique();

                    b.ToTable("Sounds");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.StandardAggregate.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "soundeq", "application");

                    b.Property<int>("KitTestId")
                        .HasColumnType("int");

                    b.Property<string>("MoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoldId1")
                        .HasColumnType("int");

                    b.Property<string>("StandardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KitTestId");

                    b.HasIndex("MoldId1");

                    b.HasIndex("StandardId")
                        .IsUnique();

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.TimeSeriesObjectAggregate.TimeSeriesObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "timeseriesobjecteq", "application");

                    b.Property<int?>("PerformanceIndexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeSeriesObjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Value")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceIndexId");

                    b.HasIndex("TimeSeriesObjectId")
                        .IsUnique();

                    b.ToTable("TimeSeriesObjects");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.WorkingTimeAggregate.WorkingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "workingtimeeq", "application");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingTimeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("WorkingTimeId")
                        .IsUnique();

                    b.ToTable("WorkingTimes");
                });

            modelBuilder.Entity("CauseMaintenanceResponse", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.CauseAggregate.Cause", null)
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", null)
                        .WithMany()
                        .HasForeignKey("MaintenanceResponsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorrectionMaintenanceResponse", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.CorrectionAggregate.Correction", null)
                        .WithMany()
                        .HasForeignKey("CorrectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", null)
                        .WithMany()
                        .HasForeignKey("MaintenanceResponsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", "MTTF")
                        .WithMany()
                        .HasForeignKey("MTTFId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", "OEE")
                        .WithMany()
                        .HasForeignKey("OEEId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.WorkingTimeAggregate.WorkingTime", null)
                        .WithMany("Equipments")
                        .HasForeignKey("WorkingTimeId");

                    b.Navigation("MTBF");

                    b.Navigation("MTTF");

                    b.Navigation("OEE");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.EquipmentMaterialAggregate.EquipmentMaterial", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.EquipmentAggregate.Equipment", null)
                        .WithMany("Materials")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaterialInforAggregate.MaterialInfor", "MaterialInfor")
                        .WithMany()
                        .HasForeignKey("MaterialInforId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", null)
                        .WithMany("Materials")
                        .HasForeignKey("MoldId");

                    b.Navigation("MaterialInfor");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.ImageAggregate.Image", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceRequestAggregate.MaintenanceRequest", null)
                        .WithMany("Images")
                        .HasForeignKey("MaintenanceRequestId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", null)
                        .WithMany("Images")
                        .HasForeignKey("MaintenanceResponseId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", null)
                        .WithMany("Images")
                        .HasForeignKey("MoldId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldInforAggregate.MoldInfor", null)
                        .WithMany("Images")
                        .HasForeignKey("MoldInforId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.StandardAggregate.Standard", null)
                        .WithMany("Images")
                        .HasForeignKey("StandardId");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaintenanceRequestAggregate.MaintenanceRequest", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.EquipmentAggregate.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", "Mold")
                        .WithMany()
                        .HasForeignKey("MoldId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PersonAggregate.Person", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PersonAggregate.Person", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PersonAggregate.Person", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Equipment");

                    b.Navigation("Mold");

                    b.Navigation("Requester");

                    b.Navigation("ResponsiblePerson");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.EquipmentAggregate.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", "Mold")
                        .WithMany()
                        .HasForeignKey("MoldId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceRequestAggregate.MaintenanceRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PersonAggregate.Person", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Mold");

                    b.Navigation("Request");

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaterialAggregate.Material", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", null)
                        .WithMany("Materials")
                        .HasForeignKey("MaintenanceResponseId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaterialInforAggregate.MaterialInfor", "MaterialInfor")
                        .WithMany()
                        .HasForeignKey("MaterialInforId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialInfor");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaterialRequestAggregate.MaterialRequest", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaterialInforAggregate.MaterialInfor", "MaterialInfor")
                        .WithMany()
                        .HasForeignKey("MaterialInforId");

                    b.Navigation("MaterialInfor");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", "MTTF")
                        .WithMany()
                        .HasForeignKey("MTTFId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", "OEE")
                        .WithMany()
                        .HasForeignKey("OEEId");

                    b.Navigation("MTBF");

                    b.Navigation("MTTF");

                    b.Navigation("OEE");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MoldInforAggregate.MoldInfor", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.StandardAggregate.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.WorkingTimeAggregate.WorkingTime", null)
                        .WithMany("Persons")
                        .HasForeignKey("WorkingTimeId");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.ProductAggregate.Product", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", null)
                        .WithMany("Products")
                        .HasForeignKey("MoldId1");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldInforAggregate.MoldInfor", null)
                        .WithMany("Products")
                        .HasForeignKey("MoldInforId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.SoundAggregate.Sound", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceRequestAggregate.MaintenanceRequest", null)
                        .WithMany("Sounds")
                        .HasForeignKey("MaintenanceRequestId");

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", null)
                        .WithMany("Sounds")
                        .HasForeignKey("MaintenanceResponseId");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.StandardAggregate.Standard", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.KitTestAggregate.KitTest", "KitTest")
                        .WithMany()
                        .HasForeignKey("KitTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", null)
                        .WithMany("Standards")
                        .HasForeignKey("MoldId1");

                    b.Navigation("KitTest");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.TimeSeriesObjectAggregate.TimeSeriesObject", b =>
                {
                    b.HasOne("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", null)
                        .WithMany("History")
                        .HasForeignKey("PerformanceIndexId");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaintenanceRequestAggregate.MaintenanceRequest", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Sounds");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MaintenanceResponseAggregate.MaintenanceResponse", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Materials");

                    b.Navigation("Sounds");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MoldAggregate.Mold", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Materials");

                    b.Navigation("Products");

                    b.Navigation("Standards");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.MoldInforAggregate.MoldInfor", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.PerformanceIndexAggregate.PerformanceIndex", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.StandardAggregate.Standard", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WebAPICHATest.Domain.AggregateModels.WorkingTimeAggregate.WorkingTime", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
